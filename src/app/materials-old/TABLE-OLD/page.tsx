"use client"
import React, { useState } from 'react';
import { Table, Form, Input, Button, InputNumber, DatePicker, Modal, message } from 'antd';
import moment from 'moment';
// import { useRouter } from 'next/router';

const RawMaterialDashboard = () => {
  interface RawMaterial {
    key: number;
    challanNo: string;
    date: string;
    grade: string;
    thickness: number;
    width: number;
    weight: number;
    remainingWeight: number;
    materialSrno: number;
  }

  const [rawMaterials, setRawMaterials] = useState<RawMaterial[]>([]);
  const [slittingHistory, setSlittingHistory] = useState<{ [key: number]: any[] }>({});
  const [form] = Form.useForm();
  const [modalVisible, setModalVisible] = useState(false);
  const [selectedMaterial, setSelectedMaterial] = useState<RawMaterial | null>(null);
  // const router = useRouter();

  // Adjusted function to handle adding raw material with API request
  const handleAddRawMaterial = async (values: any) => {
    try {
      const response = await fetch('/api/Matarials/Raw', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          IU_FLAG: 'I', // For insert
          MATERIAL_SRNO: null, // To be generated by the database
          VENDOR_SRNO: 1, // Example: replace with actual vendor ID
          GRADE: values.grade,
          WIDTH: values.width,
          THICKNESS: values.thickness,
          WEIGHT: values.weight,
          CHALLAN_NO: values.challanNo,
          DATE: values.date.format('YYYY-MM-DD'),
          USER_SRNO: 1, // Example: replace with actual user ID
        }),
      });
      const result = await response.json();
      if (result.MsgId === 1) {
        message.success('Raw material added successfully!');
        setRawMaterials([...rawMaterials, {
          key: rawMaterials.length + 1,
          challanNo: values.challanNo,
          date: values.date.format('YYYY-MM-DD'),
          grade: values.grade,
          thickness: values.thickness,
          width: values.width,
          weight: values.weight,
          remainingWeight: values.weight,
          materialSrno: result.Data[0].MATERIAL_SRNO, // Assuming the response contains MATERIAL_SRNO
        }]);
        form.resetFields();
      } else {
        message.error(result.Msg);
      }
    } catch (error) {
      console.error('Error adding raw material:', error);
      message.error('Failed to add raw material');
    }
  };

  // Adjusted function to handle slitting operation with API request
  const handleSlitMaterial = async (values: any) => {
    if (!selectedMaterial) return;

    try {
      const response = await fetch('/api/raw-material', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          IU_FLAG: 'U', // For update
          MATERIAL_SRNO: selectedMaterial.materialSrno, // Using selected material SRNO
          VENDOR_SRNO: selectedMaterial.materialSrno, // Example: replace with actual vendor ID
          GRADE: selectedMaterial.grade,
          WIDTH: selectedMaterial.width,
          THICKNESS: selectedMaterial.thickness,
          WEIGHT: selectedMaterial.remainingWeight - values.weight, // Update remaining weight
          CHALLAN_NO: selectedMaterial.challanNo,
          DATE: selectedMaterial.date,
          USER_SRNO: 1, // Example: replace with actual user ID
        }),
      });
      const result = await response.json();
      if (result.MsgId === 1) {
        message.success('Material slit successfully!');
        const updatedMaterials = rawMaterials.map((material) =>
          material.key === selectedMaterial.key
            ? { ...material, remainingWeight: material.remainingWeight - values.weight }
            : material
        );
        setRawMaterials(updatedMaterials);

        const newSlitting = {
          ...values,
          date: values.date.format('YYYY-MM-DD'),
        };

        setSlittingHistory({
          ...slittingHistory,
          [selectedMaterial.key]: [...(slittingHistory[selectedMaterial.key] || []), newSlitting],
        });

        setModalVisible(false);
      } else {
        message.error(result.Msg);
      }
    } catch (error) {
      console.error('Error slitting raw material:', error);
      message.error('Failed to slit material');
    }
  };

  const columns = [
    {
      title: 'Challan No',
      dataIndex: 'challanNo',
      key: 'challanNo',
    },
    {
      title: 'Date',
      dataIndex: 'date',
      key: 'date',
    },
    {
      title: 'Grade',
      dataIndex: 'grade',
      key: 'grade',
    },
    {
      title: 'Thickness (mm)',
      dataIndex: 'thickness',
      key: 'thickness',
    },
    {
      title: 'Width (mm)',
      dataIndex: 'width',
      key: 'width',
    },
    {
      title: 'Weight (kg)',
      dataIndex: 'weight',
      key: 'weight',
    },
    {
      title: 'Remaining Weight (kg)',
      dataIndex: 'remainingWeight',
      key: 'remainingWeight',
    },
    {
      title: 'Actions',
      key: 'actions',
      render: (text: any, record: any) => (
        <Button
          type="primary"
          onClick={() => {
            setSelectedMaterial(record);
            setModalVisible(true);
          }}
        >
          Slit
        </Button>
      ),
    },
  ];

  const slittingColumns = [
    {
      title: 'Date',
      dataIndex: 'date',
      key: 'date',
    },
    {
      title: 'Slit Width (mm)',
      dataIndex: 'width',
      key: 'width',
    },
    {
      title: 'Slit Weight (kg)',
      dataIndex: 'weight',
      key: 'weight',
    },
    {
      title: 'DC No',
      dataIndex: 'dcNo',
      key: 'dcNo',
    },
  ];

  return (
    <div style={{ padding: '20px' }}>
      <h1>Raw Material Dashboard</h1>

      <Form
        form={form}
        layout="vertical"
        onFinish={handleAddRawMaterial}
        style={{ marginBottom: '20px' }}
      >
        <Form.Item name="challanNo" label="Challan No" rules={[{ required: true, message: 'Please enter challan number' }]}>
          <Input placeholder="Enter Challan No" />
        </Form.Item>
        <Form.Item name="date" label="Date" rules={[{ required: true, message: 'Please select date' }]}>
          <DatePicker style={{ width: '100%' }} />
        </Form.Item>
        <Form.Item name="grade" label="Grade" rules={[{ required: true, message: 'Please enter grade' }]}>
          <Input placeholder="Enter Grade" />
        </Form.Item>
        <Form.Item name="thickness" label="Thickness (mm)" rules={[{ required: true, message: 'Please enter thickness' }]}>
          <InputNumber style={{ width: '100%' }} min={0} placeholder="Enter Thickness" />
        </Form.Item>
        <Form.Item name="width" label="Width (mm)" rules={[{ required: true, message: 'Please enter width' }]}>
          <InputNumber style={{ width: '100%' }} min={0} placeholder="Enter Width" />
        </Form.Item>
        <Form.Item name="weight" label="Weight (kg)" rules={[{ required: true, message: 'Please enter weight' }]}>
          <InputNumber style={{ width: '100%' }} min={0} placeholder="Enter Weight" />
        </Form.Item>
        <Button type="primary" htmlType="submit">Add Raw Material</Button>
      </Form>

      <Table
        dataSource={rawMaterials}
        columns={columns}
        expandable={{
          expandedRowRender: (record) => (
            <Table
              dataSource={slittingHistory[record.key] || []}
              columns={slittingColumns}
              pagination={false}
              rowKey="dcNo"
            />
          ),
        }}
      />

      <Modal
        title="Slit Material"
        visible={modalVisible}
        onCancel={() => setModalVisible(false)}
        footer={null}
      >
        <Form layout="vertical" onFinish={handleSlitMaterial}>
          <Form.Item name="date" label="Date" rules={[{ required: true, message: 'Please select date' }]}>
            <DatePicker style={{ width: '100%' }} />
          </Form.Item>
          <Form.Item name="width" label="Slit Width (mm)" rules={[{ required: true, message: 'Please enter slit width' }]}>
            <InputNumber style={{ width: '100%' }} min={0} placeholder="Enter Width" />
          </Form.Item>
          <Form.Item name="weight" label="Slit Weight (kg)" rules={[{ required: true, message: 'Please enter slit weight' }]}>
            <InputNumber style={{ width: '100%' }} min={0} placeholder="Enter Weight" />
          </Form.Item>
          <Form.Item name="dcNo" label="DC No" rules={[{ required: true, message: 'Please enter DC number' }]}>
            <Input placeholder="Enter DC No" />
          </Form.Item>
          <Button type="primary" htmlType="submit">Submit</Button>
        </Form>
      </Modal>
    </div>
  );
};

export default RawMaterialDashboard;
