"use client"
import React, { useState } from 'react';
import { Table, Form, Input, Button, InputNumber, DatePicker, Modal, message,Row, Col, Select, notification, Space } from 'antd';
import { PlusCircleOutlined, MinusCircleOutlined } from '@ant-design/icons';
import moment from 'moment';
import { apiClient } from '@/utils/apiClient';
// import { useRouter } from 'next/router';

const RawMaterialDashboard = () => {
  interface RawMaterial {
    key: number;
    challanNo: string;
    date: string;
    MATERIAL_GRADE: string;
    MATERIAL_THICKNESS: number;
    width: number;
    MATERIAL_WEIGHT: number;
    remainingWeight: number;
    materialSrno: number;
  }

  const [rawMaterials, setRawMaterials] = useState<RawMaterial[]>([]);
  const [slittingHistory, setSlittingHistory] = useState<{ [key: number]: any[] }>({});
  const [form] = Form.useForm();
  const [modalVisible, setModalVisible] = useState(false);
  const [selectedMaterial, setSelectedMaterial] = useState<RawMaterial | null>(null);
// state for grade options with interface
  const [optGrades, setOptGrades] = useState<{ label: string; value: string }[]>([]);
  const [optThickNess, setoptThickNess] = useState<{ label: string; value: string }[]>([]);

    // load useeffect to fetch grades
    React.useEffect(() => {
      FetchPlCommon();
      FetchRawMaterials();

}, []);


  // Function to fetch common dropdown options
  const FetchPlCommon = async () => {
    const response = await apiClient<Record<string, any>>('/api/Pl_Common?USER_SRNO=1&TBL_SRNO=1,3', 'GET');
    if (response.msgId === 1) {
      if (!response.data) {
        console.log('No data found');
        return;
      }
      // Destructure the fields (M_GRADE, M_GENDER, M_PRODUCT)
      const { M_GRADE,M_THICKNESS } = response.data;
      setOptGrades(M_GRADE)
      setoptThickNess(M_THICKNESS)
    } else {
      message.error(response.msg)
      console.error('API Error:', response.msg);  // Logging the error message
    }
  };

//  fUNCTION TO FETCH RAW MATERIALS
  const FetchRawMaterials = async () => {
    try {
      const response = await apiClient('/api/Matarials/Raw', 'GET');
      console.log(response, 'response');
      
      if (response.msgId === 1) {
        if (!response.data) {
          console.log('No data found');
          return;
        }
        setRawMaterials(response.data.RAW_MATERIALS.map((material: any, index: number) => ({
          key: index + 1,
          challanNo: material.CHALLAN_NO,
          date: moment(material.DATE).format('YYYY-MM-DD'),
          MATERIAL_GRADE: material.MATERIAL_GRADE,
          MATERIAL_THICKNESS: material.MATERIAL_THICKNESS,
          width: material.MATERIAL_WIDTH,
          MATERIAL_WEIGHT: material.MATERIAL_WEIGHT,
          remainingWeight: material.WEIGHT,
          materialSrno: material.MATERIAL_SRNO,
        })));
      } else {
        message.error(response.msg)
        console.error('API Error:', response.msg);  // Logging the error message
      }
    } catch (error) {
      console.error('Error fetching raw materials:', error);
      message.error('Failed to fetch raw materials');
    }
  };


  // Adjusted function to handle adding raw material with API request
  const handleAddRawMaterial = async (values: any) => {
    try {
      const payload = {
        IU_FLAG: 'I', // For insert
        MATERIAL_SRNO: null, // To be generated by the database
        VENDOR_SRNO: 1, // Example: replace with actual vendor ID
        MATERIAL_GRADE: values.MATERIAL_GRADE,
        MATERIAL_WIDTH: values.width,
        MATERIAL_THICKNESS: values.MATERIAL_THICKNESS,
        MATERIAL_WEIGHT: values.MATERIAL_WEIGHT,
        CHALLAN_NO: values.challanNo,
        DATE: values.date.format('YYYY-MM-DD'),
        USER_SRNO: 1, // Example: replace with actual user ID
      }
      const response = await apiClient('/api/Matarials/Raw', 'POST', payload);
      if (response.msgId === 1) {
        message.success('Raw material added successfully!');
        setRawMaterials([...rawMaterials, {
          key: rawMaterials.length + 1,
          challanNo: values.challanNo,
          date: values.date.format('YYYY-MM-DD'),
          MATERIAL_GRADE: values.MATERIAL_GRADE,
          MATERIAL_THICKNESS: values.MATERIAL_THICKNESS,
          width: values.width,
          MATERIAL_WEIGHT: values.MATERIAL_WEIGHT,
          remainingWeight: values.weight,
          materialSrno: 1, // Assuming the response contains MATERIAL_SRNO
        }]);
        form.resetFields();
      } else {
        message.error(`Error: ${response.msg}`);
      }
    } catch (error) {
      console.error('Error adding raw material:', error);
      message.error('Failed to add raw material');
    }
  };

  // Adjusted function to handle slitting operation with API request
  const handleSlitMaterial = async (values: any) => {
    if (!selectedMaterial) return;

    try {
      // const response = await fetch('/api/raw-material', {
      //   method: 'POST',
      //   headers: {
      //     'Content-Type': 'application/json',
      //   },
      //   body: JSON.stringify({
      //     IU_FLAG: 'U', // For update
      //     MATERIAL_SRNO: selectedMaterial.materialSrno, // Using selected material SRNO
      //     VENDOR_SRNO: selectedMaterial.materialSrno, // Example: replace with actual vendor ID
      //     MATERIAL_GRADE: selectedMaterial.MATERIAL_GRADE,
      //     MATERIAL_WIDTH: selectedMaterial.width,
      //     THICKNESS: selectedMaterial.MATERIAL_THICKNESS,
      //     WEIGHT: selectedMaterial.remainingWeight - values.weight, // Update remaining weight
      //     CHALLAN_NO: selectedMaterial.challanNo,
      //     DATE: selectedMaterial.date,
      //     USER_SRNO: 1, // Example: replace with actual user ID
      //   }),
      // });
      // const result = await response.json();
      // if (result.MsgId === 1) {
        message.success('Material slit successfully!');
        const updatedMaterials = rawMaterials.map((material) =>
          material.key === selectedMaterial.key
            ? { ...material, remainingWeight: material.remainingWeight - values.MATERIAL_WEIGHT }
            : material
        );
        setRawMaterials(updatedMaterials);

        const newSlitting = {
          ...values,
          date: values.date.format('YYYY-MM-DD'),
        };

        setSlittingHistory({
          ...slittingHistory,
          [selectedMaterial.key]: [...(slittingHistory[selectedMaterial.key] || []), newSlitting],
        });

        setModalVisible(false);
      // } else {
      //   message.error(result.Msg);
      // }
    } catch (error) {
      console.error('Error slitting raw material:', error);
      message.error('Failed to slit material');
    }
  };

  const columns = [
    {
      title: 'Challan No',
      dataIndex: 'challanNo',
      key: 'challanNo',
    },
    {
      title: 'Date',
      dataIndex: 'date',
      key: 'date',
    },
    {
      title: 'Grade',
      dataIndex: 'MATERIAL_GRADE',
      key: 'MATERIAL_GRADE',
    },
    {
      title: 'Thickness (mm)',
      dataIndex: 'MATERIAL_THICKNESS',
      key: 'MATERIAL_THICKNESS',
    },
    {
      title: 'Width (mm)',
      dataIndex: 'width',
      key: 'width',
    },
    {
      title: 'Weight (kg)',
      dataIndex: 'MATERIAL_WEIGHT',
      key: 'MATERIAL_WEIGHT',
    },
    {
      title: 'Remaining Weight (kg)',
      dataIndex: 'remainingWeight',
      key: 'remainingWeight',
    },
    {
      title: 'Actions',
      key: 'actions',
      render: (text: any, record: any) => (
        <Button
          type="primary"
          onClick={() => {
            setSelectedMaterial(record);
            setModalVisible(true);
          }}
        >
          Slit
        </Button>
      ),
    },
  ];

  const slittingColumns = [
    {
      title: 'Date',
      dataIndex: 'date',
      key: 'date',
    },
    {
      title: 'Slit Width (mm)',
      dataIndex: 'width',
      key: 'width',
    },
    {
      title: 'Slit Weight (kg)',
      dataIndex: 'weight',
      key: 'weight',
    },
    {
      title: 'DC No',
      dataIndex: 'dcNo',
      key: 'dcNo',
    },
  ];

  return (
    <div style={{ padding: '20px' }}>
      {/* <h1>Raw Material Dashboard</h1> */}

      <Form
        form={form}
        layout="horizontal"
        onFinish={handleAddRawMaterial}
        style={{ marginBottom: '20px' }}
      >
        <Row gutter={16}>
          <Col span={8}>
        <Form.Item name="challanNo" label="Challan No" rules={[{ required: true, message: 'Please enter challan number' }]}>
          <Input placeholder="Enter Challan No" />
        </Form.Item>
          </Col>
          <Col span={8}>
        <Form.Item name="date" label="Date" rules={[{ required: true, message: 'Please select date' }]}>
          <DatePicker style={{ width: '100%' }} />
        </Form.Item>
          </Col>
          <Col span={8}>
        <Form.Item name="MATERIAL_GRADE" label="Grade" rules={[{ required: true, message: 'Please select grade' }]}>
          <Select showSearch placeholder="Select Grade" options={optGrades}></Select>
        </Form.Item>
          </Col>
        </Row>
        <Row gutter={16}>
          <Col span={7}>
        <Form.Item name="MATERIAL_THICKNESS" label="Thickness (mm)" rules={[{ required: true, message: 'Select Thickness' }]}>
          <Select showSearch placeholder="Select Thickness" options={optThickNess}></Select>
        </Form.Item>
          </Col>
          <Col span={7}>
        <Form.Item name="width" label="Width (mm)" rules={[{ required: true, message: 'Please enter width' }]}>
          <InputNumber style={{ width: '100%' }} min={0} placeholder="Enter Width" />
        </Form.Item>
          </Col>
          <Col span={7}>
        <Form.Item name="MATERIAL_WEIGHT" label="Weight (kg)" rules={[{ required: true, message: 'Please enter weight' }]}>
          <InputNumber style={{ width: '100%' }} min={0} placeholder="Enter Weight" />
        </Form.Item>
          </Col>
          <Col span={3}>
        <Button type="primary" htmlType="submit">Add Raw Material</Button>
          </Col>
        </Row>
        <Row>
         
        </Row>
      </Form>

      <Table
        dataSource={rawMaterials}
        columns={columns}
        expandable={{
          expandedRowRender: (record) => (
            <Table
              dataSource={slittingHistory[record.key] || []}
              columns={slittingColumns}
              pagination={false}
              rowKey="dcNo"
            />
          ),
        }}
      />
       <Modal
      title="Slit Material"
      visible={modalVisible}
      onCancel={() => {
        form.resetFields();
        setModalVisible(false);
      }}
      footer={null}
      bodyStyle={{ padding: '24px 32px' }}
      centered
    >
      <Form
        layout="vertical"
        form={form}
        onFinish={handleSlitMaterial}
      >
        {/* Vendor Dropdown */}
        <Form.Item
          name="vendor"
          label="Vendor"
          rules={[{ required: true, message: 'Please select a vendor' }]}
        >
          <Select placeholder="Select Vendor"></Select>
        </Form.Item>

        {/* Date Picker */}
        <Form.Item
          name="date"
          label="Date"
          rules={[{ required: true, message: 'Please select date' }]}
        >
          <DatePicker
            style={{ width: '100%' }}
            // disabledDate={(current) => current && current < Date.now()}
          />
        </Form.Item>

        {/* Dynamic Fields for Width and Nos */}
        <Form.List name="slitDetails">
          {(fields, { add, remove }) => (
            <div>
              {fields.map(({ key, name, fieldKey, ...restField }) => (
                <Space
                  key={key}
                  style={{
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'space-between',
                    marginBottom: 8,
                  }}
                  align="baseline"
                >
                  {/* Width Field */}
                  <Form.Item
                    {...restField}
                    name={[name, 'width']}
                    fieldKey={[fieldKey?? key, 'width']}
                    rules={[{ required: true, message: 'Enter width (mm)' }]}
                    style={{ flex: 1 }}
                  >
                    <InputNumber
                      min={0}
                      placeholder="Width (mm)"
                      style={{ width: '100%' }}
                    />
                  </Form.Item>

                  {/* Nos Field */}
                  <Form.Item
                    {...restField}
                    name={[name, 'nos']}
                    fieldKey={[fieldKey ?? key, 'nos']}
                    rules={[{ required: true, message: 'Enter nos' }]}
                    style={{ flex: 1 }}
                  >
                    <InputNumber
                      min={0}
                      placeholder="Nos"
                      style={{ width: '100%' }}
                    />
                  </Form.Item>

                  {/* Remove Icon */}
                  <MinusCircleOutlined
                    onClick={() => remove(name)}
                    style={{
                      color: 'red',
                      fontSize: '16px',
                      cursor: 'pointer',
                    }}
                  />
                </Space>
              ))}

              {/* Add Button */}
              <Button
                type="dashed"
                onClick={() => add()}
                block
                icon={<PlusCircleOutlined />}
                style={{ marginTop: 16 }}
              >
                Add Width and Nos
              </Button>
            </div>
          )}
        </Form.List>

        {/* Other Fields */}
        <Form.Item
          name="weight"
          label="Slit Weight (kg)"
          rules={[{ required: true, message: 'Please enter slit weight' }]}
        >
          <InputNumber
            style={{ width: '100%' }}
            min={0}
            placeholder="Enter Weight"
          />
        </Form.Item>
        <Form.Item
          name="dcNo"
          label="DC No"
          rules={[{ required: true, message: 'Please enter DC number' }]}
        >
          <Input placeholder="Enter DC No" />
        </Form.Item>

        {/* Submit Button */}
        <Button
          type="primary"
          htmlType="submit"
          // loading={loading}
          style={{ width: '100%', marginTop: 20 }}
        >
          Submit
        </Button>
      </Form>
    </Modal>
    </div>
  );
};

export default RawMaterialDashboard;
